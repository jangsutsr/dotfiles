# TextMate added these variables to cope with changes in ERB handling
# in different versions of Rails -- for instance, Rails 3 automatically
# strips whitespace so that it's no longer necessary to use a form like
# <% end -%>, but if you're still maintaining Rails 2 projects, you
# can't omit the minus sign and get the same behavior.
#
# The following regex replace substitutes the function below for the
# TextMate variable references after the snippets are converted:
#
#   /\v\$\{(TM_RAILS_TEMPLATE_([^_]+)_RUBY_([^_\s]+))\}/`!p textmate_var('\1', snip)`/g
#
global !p
def textmate_var(var, snip):
    lookup = dict(
       TM_RAILS_TEMPLATE_START_RUBY_EXPR = snip.opt('g:tm_rails_template_start_ruby_expr', '<%= '),
       TM_RAILS_TEMPLATE_END_RUBY_EXPR = snip.opt('g:tm_rails_template_end_ruby_expr', ' %>'),
       TM_RAILS_TEMPLATE_START_RUBY_INLINE = snip.opt('g:tm_rails_template_start_ruby_inline', ' %>'),
       TM_RAILS_TEMPLATE_END_RUBY_INLINE = snip.opt('g:tm_rails_template_end_ruby_inline', ' %>'),
       TM_RAILS_TEMPLATE_END_RUBY_BLOCK = 'end'
    )

    snip.rv = lookup[var]
    return
endglobal


###########################################################################
#            GENERATED FROM get_tm_snippets.py + REGEX REPLACE            #
###########################################################################

snippet end "end (ERB)"
<% end -%>
endsnippet


snippet layout "layout"
layout "${1:template_name}"${2:${3:, :only => ${4:[:${5:action}, :${6:action}]}}${7:, :except => ${8:[:${9:action}, :${10:action}]}}}
endsnippet

snippet hide "page.hide (*ids)"
page.hide ${1:"${2:id(s)}"}
endsnippet

snippet ins "page.insert_html (position, id, partial)"
page.insert_html :${1:top}, ${2:"${3:id}"}, :${4:partial => "${5:template}"}
endsnippet

snippet rep "page.replace (id, partial)"
page.replace ${1:"${2:id}"}, :${3:partial => "${4:template}"}
endsnippet

snippet reph "page.replace_html (id, partial)"
page.replace_html ${1:"${2:id}"}, :${3:partial => "${4:template}"}
endsnippet

snippet show "page.show (*ids)"
page.show ${1:"${2:id(s)}"}
endsnippet

snippet tog "page.toggle (*ids)"
page.toggle ${1:"${2:id(s)}"}
endsnippet

snippet vis "page.visual_effect (effect, id)"
page.visual_effect :${1:toggle_slide}, ${2:"${3:DOM ID}"}
endsnippet

snippet rp "render (partial) (rp)"
render :partial => "${1:item}"
endsnippet

snippet rpc "render (partial,collection) (rpc)"
render :partial => "${1:item}", :collection => ${2:@$1s}
endsnippet

snippet rpl "render (partial,locals) (rpl)"
render :partial => "${1:item}", :locals => { :${2:$1} => ${3:@$1}$0 }
endsnippet

snippet rpo "render (partial,object) (rpo)"
render :partial => "${1:item}", :object => ${2:@$1}
endsnippet

snippet rps "render (partial,status) (rps)"
render :partial => "${1:item}", :status => ${2:500}
endsnippet

snippet else "else (ERB)"
<% else %>
  
endsnippet

snippet if "if (ERB)"
<% if ${1:condition} %>
$0
<% end %>
endsnippet

snippet lf "link_to_function"
`!p textmate_var('TM_RAILS_TEMPLATE_START_RUBY_EXPR', snip)`link_to_function ${1:"${2:Greeting}"}, "${3:alert('Hello world!')}"$4`!p textmate_var('TM_RAILS_TEMPLATE_END_RUBY_EXPR', snip)`
endsnippet

snippet form "rails form"
<%= form_for($0) do |f| %>
<% end %>
endsnippet

snippet field "form field"
<%= f.label :${1} %>
<%= f.text_field :${2} %>
endsnippet

snippet for "for loop (ERB)"
<% for ${2} in ${1} %>
  $3
<% end %>
endsnippet

# vim:ft=snippets:
